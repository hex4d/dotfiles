# system
[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
" for clear plugins
" call map(dein#check_clean(), "delete(v:val, 'rf')")
'''
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap <Space>uf :Denite file/rec <CR>
  nnoremap <Space>uh :Denite file/old <CR>
  nnoremap <Space>ul :Denite line<CR>
  nnoremap <Space>ub :Denite buffer <CR>
  nnoremap <Space>u[  :DeniteCursorWord grep <CR>
  nnoremap <Space>ug  :Denite grep <CR>
  nnoremap <Space>ur :Denite -resume <CR>
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  endfunction

  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
  endfunction

  if executable('rg')
  call denite#custom#var('file_rec', 'command',
      \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
  endif
  '''
  hook_post_source = '''
"  call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
"  call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>',
"  'noremap')
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
hook_add = '''
let g:echodoc_enable_at_startup = 1
let g:echodoc#type = "virtual"
'''
[[plugins]]
repo ='itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' },
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \ 'left': [['mode', 'paste'],
        \          ['gitbranch', 'gitstatus', 'readonly', 'filename', 'modified']],
        \  'right': [['linter_errors', 'linter_warnings', 'linter_ok'], ['lineinfo'], ['fileformat', 'fileencoding'], ['filetype']]
        \ },
        \ 'inactive': {
        \ 'left': [['gitbranch', 'gitstatus', 'filename', 'modified']],
        \  'right': [['linter_errors', 'linter_warnings', 'linter_ok'], ['lineinfo'], ['fileformat', 'fileencoding'], ['filetype']]
        \ },
        \ 'component_expand': {
        \   'linter_warnings': 'AleWarning',
        \   'linter_errors': 'AleError',
        \   'linter_ok': 'AleOk',
        \   'gitbranch': 'GitBranch',
        \   'gitstatus': 'GitStatus',
        \   'filename': 'MyFilename',
        \   'filetype': 'FileType',
        \ },
        \ 'component_type': {
        \   'readonly': 'error',
        \   'linter_warnings': 'warning',
        \   'linter_errors': 'error',
        \   'linter_ok': 'ok'
        \ },
        \ }

  function! AleError()
    let count = ale#statusline#Count(bufnr(''))
    let errors = count.error + count.style_error
    return errors == 0 ? '' : ' ' . errors
  endfunction

  function! AleWarning()
    let count = ale#statusline#Count(bufnr(''))
    let warnings = count.warning + count.style_warning
    return warnings == 0 ? '' : ' ' . warnings
  endfunction
  function! AleOk()
    let count = ale#statusline#Count(bufnr(''))
    return count.total == 0 ? ' ' : ''
  endfunction

  augroup ALE
    autocmd!
    autocmd User ALELint call lightline#update()
  augroup END

  function! MyFilename()
    return winwidth(0) > 160 ?
          \ expand('%:p') !=# '' ? expand('%:p') : '[No Name]' :
          \ winwidth(0) > 120 ? 
          \ expand('%:t') !=# '' ? expand('%:h') . expand('%:t') : '[No Name]' :
          \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  endfunction

  function GitBranch()
    let branch = gina#component#repo#branch()
    return branch == '' ? '' : printf('%s%s', ' ', branch)
  endfunction

  function! FileType()
    return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! GitStatus()
    let staged = gina#component#status#staged()
    let unstaged = gina#component#status#unstaged()
    let conflicted = gina#component#status#conflicted()
    return printf(
          \ 's:%s u:%s c:%s',
          \ staged,
          \ unstaged,
          \ conflicted,
          \)
    let result = system('git --git-dir=' . fugitive#extract_git_dir(expand('%:p')) . ' --work-tree=' . substitute(fugitive#extract_git_dir(expand('%:p')), '.git', '', 'g') .' status')
    " let dir = a:0 ? a:1 : (exists('b:git_dir') && b:git_dir !=# '' ? b:git_dir : fugitive#extract_git_dir(expand('%:p')))

    let status = ''
    if stridx(result, 'up-to-date') != -1
      :let status = status . ''
    endif
    if stridx(result, 'rebase in progress') != -1
      :let status = status . '!conflict|'
    endif
    if stridx(result, 'Changes to be committed') != -1
      :let status = status . '+'
    endif
    if stridx(result, 'Changes not staged for commit') != -1
      :let status = status . '-'
    endif
    if stridx(result, 'Untracked') != -1
      :let status = status . '?'
    endif
    return status
  endfunction
'''
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
'''
[[plugins]] # terminal
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
  nnoremap <silent> ,rc :TREPLSendFile<cr>
  nnoremap <silent> ,rl :TREPLSendLine<cr>
  vnoremap <silent> ,rl :TREPLSendSelection<cr>
  nnoremap <Space>vp :vert botright T cd %:h; clear;<CR>
  nnoremap <Space>r :vert botright T cd %:h; clear; ipython --no-autoindent <CR>
  nnoremap <Space>vw :T cd ~/Documents/Workspace/<CR>
  nnoremap <Space>vv :Ttoggle<CR>
  nnoremap <Space>vo :vert botright Topen<CR> cd %:h; clear;<CR>
  nnoremap <Space>vc :Tclose<CR>
  let g:neoterm_autoinsert = 1
  " let g:neoterm_open_in_all_tabs = 1
'''
[[plugins]]
repo = 'Shougo/vimshell'
if = "!has('nvim')"
hook_add = '''
  " source ~/.config/nvim/plugins/neoterm.rc.vim
'''
[[plugins]]
repo = 'Shougo/vimproc.vim'
# if = "!has('nvim')"
build = 'make'
[[plugins]]
repo ='w0rp/ale'
hook_add = '''
nmap <silent> <C-e><C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-e><C-k> <Plug>(ale_previous_wrap)

" let g:ale_set_loclist = 0
" let g:ale_set_quickfix = 1

let g:ale_fixers = {
  \    'javascript': ['eslint'],
  \    'typescript': ['eslint'],
  \    'vue': ['eslint'],
  \    'css': ['stylelint'],
  \    'scss': ['stylelint'],
  \}
let g:ale_fix_on_save = 1

let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
'''
[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  map <C-c><C-c> <Plug>(caw:hatpos:toggle)
'''
[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  let g:EasyMotion_leader_key=";"
  let g:EasyMotion_smartcase=1
  map f <Plug>(easymotion-fl)
  map t <Plug>(easymotion-tl)
  map F <Plug>(easymotion-Fl)
  map T <Plug>(easymotion-Tl)

  nmap s <Plug>(easymotion-s)
  xmap s <Plug>(easymotion-s)
  omap s <Plug>(easymotion-t)

  nmap g/ <Plug>(easymotion-sn)
  xmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)

  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1

  let g:EasyMotion_use_upper = 1
'''
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''
[[plugins]]
repo = 'michaeljsmith/vim-indent-object'
[[plugins]]
repo = 'ivalkeen/nerdtree-execute'
[[plugins]]
repo = 'vim-scripts/gtags.vim'
[[plugins]]
repo = 'itmammoth/doorboy.vim'
[[plugins]]
repo = 'tpope/vim-repeat'
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''
[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
'''

# Filetype
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

# Typescript
[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
[[plugins]]
repo = 'mhartington/nvim-typescript'
build = 'install.sh'
hook_add = '''
  nnoremap <Space>to :TSDoc<CR>
  nnoremap <Space>tp :TSType<CR>
  nnoremap <Space>tt :TSTypeDef<CR>
  nnoremap <Space>ti :TSImport<CR>
  nnoremap <Space>tr :TSRefs<CR>
  nnoremap <Space>td :TSDefPreview<CR>
  let g:nvim_typescript#type_info_on_hold = 1
  let g:nvim_typescript#diagnostics_enable = 0
  let g:nvim_typescript#vue_support = 1
'''

# UI
[[plugins]]
repo = 'RRethy/vim-illuminate'
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''
[[plugins]] # solarized
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  if !has('mac')
    let g:solarized_termcolors=256
  endif
  au MyAutoCmd VimEnter * nested colorscheme solarized
  set background=light
'''

# git
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'jreybert/vimagit'
[[plugins]]
repo = 'lambdalisue/gina.vim'
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'cohama/agit.vim'
[[plugins]]
repo = 'neoclide/denite-git'

# Utility
[[plugins]]
repo = 'hiradd/easydiary'
hook_add = '''
  let g:easydiary_directory = '~/Workspace/note/'
'''
[[plugins]]
repo = 'moznion/hateblo.vim'
[[plugins]]
repo = 'kannokanno/previm'
hook_add = '''
  let g:previm_open_cmd = 'open -a "Google Chrome"'
'''
[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
hook_add = '''
  nnoremap <Space>tm :TableModeToggle<CR>
'''
[[plugins]]
repo = 'elixir-editors/vim-elixir'

[[plugins]]
repo = 'ElmCast/elm-vim'

[[plugins]]
repo = 'janko/vim-test'
[[plugins]]
repo = 'ElmCast/elm-vim'
