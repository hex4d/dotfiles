[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo ='itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \ 'left': [['mode', 'paste'], 
        \          ['gitbranch', 'gitstatus', 'readonly', 'filename', 'modified']]
        \ },
        \ 'inactive': {
        \ 'left': [['gitbranch', 'gitstatus', 'filename']]
        \ },
        \ 'component_function' : {
        \   'gitbranch': 'fugitive#head',
        \   'gitstatus': 'GitStatus',
        \   'filename': 'MyFilename'
        \ },
        \ }
  function! MyFilename()
    return winwidth(0) > 160 ?
          \ expand('%:p') !=# '' ? expand('%:p') : '[No Name]' :
          \ winwidth(0) > 120 ? 
          \ expand('%:t') !=# '' ? expand('%:h') . expand('%:t') : '[No Name]' :
          \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  endfunction

  function! GitStatus()
    let result = system('git --git-dir=' . fugitive#extract_git_dir(expand('%:p')) . ' --work-tree=' . substitute(fugitive#extract_git_dir(expand('%:p')), '.git', '', 'g') .' status')
    " let dir = a:0 ? a:1 : (exists('b:git_dir') && b:git_dir !=# '' ? b:git_dir : fugitive#extract_git_dir(expand('%:p')))

    let status = ''
    if stridx(result, 'up-to-date') != -1
      :let status = status . ''
    endif
    if stridx(result, 'rebase in progress') != -1
      :let status = status . '!conflict|'
    endif
    if stridx(result, 'Changes to be committed') != -1
      :let status = status . '+'
    endif
    if stridx(result, 'Changes not staged for commit') != -1
      :let status = status . '-'
    endif
    if stridx(result, 'Untracked') != -1
      :let status = status . '?'
    endif
    return status
  endfunction
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # solarized
repo = 'altercation/vim-colors-solarized'
hook_add = '''
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  
  if !has('mac')
    let g:solarized_termcolors=256
  endif
  au MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
'''


[[plugins]] # terminal
repo = 'hiradd/neoterm'
if = "has('nvim')"
hook_add = '''
  nnoremap <silent> ,rc :TREPLSendFile<cr>
  nnoremap <silent> ,rl :TREPLSendLine<cr>
  vnoremap <silent> ,rl :TREPLSendSelection<cr>
  nnoremap <Space>vp :Tnew cd %:h; clear;<CR>
  nnoremap <Space>r :T cd %:h; clear; python3 -iu %<CR>
  nnoremap <Space>vw :T cd ~/Documents/Workspace/<CR>
  nnoremap <Space>vv :Ttoggle<CR>
  nnoremap <Space>vo :Topen<CR> cd %:h; clear;<CR>
  nnoremap <Space>vc :Tclose<CR>
  let g:neoterm_autoinsert = 1
  " let g:neoterm_open_in_all_tabs = 1

'''

[[plugins]]
repo = 'Shougo/vimshell'
if = "!has('nvim')"
hook_add = '''
  " source ~/.config/nvim/plugins/neoterm.rc.vim
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'neomake/neomake'
hook_add = '''
  let g:neomake_open_list = 2
  autocmd! BufWritePost * Neomake " 保存時に実行する
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
  map <C-c><C-c> <Plug>(caw:hatpos:toggle)
'''

[[plugins]]
repo = 'Lokaltog/vim-easymotion'
hook_add = '''
  let g:EasyMotion_leader_key=";"
  let g:EasyMotion_smartcase=1
  map f <Plug>(easymotion-fl)
  map t <Plug>(easymotion-tl)
  map F <Plug>(easymotion-Fl)
  map T <Plug>(easymotion-Tl)

  nmap s <Plug>(easymotion-s)
  xmap s <Plug>(easymotion-s)
  omap s <Plug>(easymotion-t)

  nmap g/ <Plug>(easymotion-sn)
  xmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)

  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1

  let g:EasyMotion_use_upper = 1
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'michaeljsmith/vim-indent-object'

# [[plugins]]
# repo = 'raimondi/delimitmate'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'ivalkeen/nerdtree-execute'

[[plugins]]
repo = 'moznion/hateblo.vim'

[[plugins]]
repo = 'cohama/agit.vim'

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'hiradd/easydiary'
hook_add = '''
  let g:easydiary_directory = '~/Workspace/note/'
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'kannokanno/previm'

[[plugins]]
repo = 'leafgarland/typescript-vim'

